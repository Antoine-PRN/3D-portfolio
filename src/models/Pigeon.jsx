/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 src/assets/3d/pigeon.glb 
Author: dudecon (https://sketchfab.com/dudecon)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/animated-bird-pigeon-797d27b68af3453e865149435df6aa30
Title: Animated Bird, Pigeon
*/
import { useEffect, useRef, useState } from "react";
import { useFrame } from "@react-three/fiber";
import { useAnimations, useGLTF } from "@react-three/drei";

import pigeonScene from "../assets/3d/pigeon.glb";

export default function Pigeon(props) {
  const pigeonRef = useRef();

  // Load the 3D model and animations from the provided GLTF file
  const { scene, animations } = useGLTF(pigeonScene);

  // Get access to the animations for the bird
  const { actions } = useAnimations(animations, pigeonRef);

  const [animationSequence, setAnimationSequence] = useState([
    "Flapping",
    "Flapping",
    "Flapping",
    "Flapping",
    "Flapping",
    "Gliding",
    "Gliding",
  ]);
  const [animationIndex, setAnimationIndex] = useState(0);
  const [isAnimationPlaying, setIsAnimationPlaying] = useState(true);

  useEffect(() => {
    const currentAnimation = actions[`BirdRig|${animationSequence[animationIndex]}`];
    currentAnimation.play();

    return () => {
      currentAnimation.stop();
    };
  }, [actions, animationSequence, animationIndex]);

  useFrame(() => {
    if (!isAnimationPlaying) {
      const currentAnimation = actions[`BirdRig|${animationSequence[animationIndex]}`];
      const currentAnimationClip = animations.find(
        (clip) => clip.name === `BirdRig|${animationSequence[animationIndex]}`
      );

      if (currentAnimation.time >= currentAnimationClip.duration) {
        setAnimationIndex((prevIndex) => (prevIndex + 1) % animationSequence.length);
        setIsAnimationPlaying(true);
      }
    }

    // Update the Y position to simulate bird-like motion using a sine wave
    pigeonRef.current.position.y = Math.sin(actions["BirdRig|Flapping"].time * 2) * 0.2 + 2;

    // Check if the bird reached a certain endpoint relative to the camera
    if (pigeonRef.current.position.x > props.camera.position.x + 10) {
      // Change direction to backward and rotate the bird 180 degrees on the y-axis
      pigeonRef.current.rotation.y = Math.PI;
    } else if (pigeonRef.current.position.x < props.camera.position.x - 10) {
      // Change direction to forward and reset the bird's rotation
      pigeonRef.current.rotation.y = 0;
    }

    // Update the X and Z positions based on the direction
    if (pigeonRef.current.rotation.y === 0) {
      // Moving forward
      pigeonRef.current.position.x += 0.01;
      pigeonRef.current.position.z -= 0.01;
    } else {
      // Moving backward
      pigeonRef.current.position.x -= 0.01;
      pigeonRef.current.position.z += 0.01;
    }
  });

  return (
    <mesh ref={pigeonRef} position={[-5, 2, 1]} scale={[1, 1, 1]}>
      <primitive object={scene} />
    </mesh>
  )
}